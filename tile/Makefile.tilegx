#
# \file Makefile.tilegx
#
# This is used to run Suricata on a "TILEncore-Gx" card
#
# make -f Makefile.tilegx run_pci
#
# or on a "TILEmpower-Gx" or "TILExtreme-Gx" platform
#
# make -f Makefile.tilegx run_net
#
# or in the Tilera simulation:
# 
# make -f Makefile.tilegx run_sim
#
# \author Tom DeCanio <decanio.tom@gmail.com>
#

# Default target.
all:

#ifndef TILERA_ROOT
#$(error The 'TILERA_ROOT' environment variable is not set.)
#endif

#
# Local environment configuation
# Go ahead and modify these:
#
HOME_DIR=/home/decanio
WORK_DIR=$(HOME_DIR)/work/TileGX
# you can probably leave the following alone
RULES_DIR=$(WORK_DIR)/rules
INSTALL_DIR=$(WORK_DIR)/suricata-install-dir
RULES_CONFIG=/opt/suricata/etc/suricata.yaml
YAML_DIR=$(WORK_DIR)/github/yaml
LIBMAGIC_DIR=$(WORK_DIR)/github/libmagic
PCAPFILE=$(HOME_DIR)/work/napatech/suricata1.pcap
LOG_DIR=$(WORK_DIR)/logs

# Modify the following with the IP address of your Tilera target
NET_ARGS=--net 192.168.0.11
# Modify the following with the USB port attached to your Tilera target
WILDCAT_ARGS=--dev usb1
# Modify the following to point to your locally installed "TILEncore-Gx" card
PCI_ARGS=--dev gxpci0

.PHONY: all clean

#
# Rebuild everything from after autoconf.sh (cross compilation)
#
build:
	echo Running configure
	LIBS="-lgxpci -lgxio -ltmc" ./configure --host=tile --prefix=$(INSTALL_DIR) \
            --disable-gccmarch-native \
	    --without-libpcap \
	    --disable-af-packet \
	    --with-libyaml-includes=$(YAML_DIR)/include \
	    --with-libyaml-libraries=$(YAML_DIR)/src/.libs \
	    --with-libmagic-includes=$(TILERA_ROOT)/tile/usr/include \
	    --with-libmagic-libraries=$(TILERA_ROOT)/tile/usr/lib
	echo Patching results
	patch config.h tile/config.h.diff
	sed -e 's/LDFLAGS =/LDFLAGS = -static/' src/Makefile > src/Makefile.tmp
	sed -e 's/-I\/usr\/include//' src/Makefile.tmp > src/Makefile
	rm src/Makefile.tmp
	echo building Suricata
	make clean
	make

#
# Rebuild everything from after autoconf.sh (native compilation)
#
build_native_static:
	echo Running configure
	LIBS="-lgxio -ltmc" ./configure --disable-gccmarch-native \
	    --without-libpcap \
	    --disable-af-packet \
	    --with-libyaml-includes=$(YAML_DIR)/include \
	    --with-libyaml-libraries=$(YAML_DIR)/src/.libs \
	    --with-libmagic-includes=/usr/include \
	    --with-libmagic-libraries=/usr/lib
	echo Patching results
	patch config.h tile/config.h.diff
	patch src/Makefile tile/Makefile.static.diff
	echo building Suricata
	make clean
	make

TILE_MONITOR = $(TILERA_ROOT)/bin/tile-monitor

# The --hvx switch allows us to add to the linux boot parameters.  In
# this case, we change the boot configuration to have tiles 1-55 run
# in 'dataplane' mode.  (In the current release, tile 0 has some overhead
# that makes it a poor choice for dataplane.)
BOOT_ARGS = --hvd "ARGS=" \
            --hvx "TLR_INTERACTIVE=n" \
            --hvx "TLR_TELNETD=n" \
            --hvx "TLR_SSHD=n" \
            --hvx "TLR_HUGEPAGES=y" \
            --hvx "dataplane=1-35"

CONFIG = gx36

IMAGE_FILE = $(CONFIG)-dataplane.image

$(IMAGE_FILE):
	@echo Building dataplane image file: this will take about ten minutes.
	$(TILE_MONITOR) --simulator --config $(CONFIG) --functional --console \
	  --create-image $@.tmp $(BOOT_ARGS)
	mv $@.tmp $@


TILE_MONITOR_ARGS = \
  --hvx "dataplane=1-35" \
  --huge-pages 800 \
  --mkdir /opt/test --cd /opt/test \
  --mount-tile /usr/lib \
  --mount-tile /lib \
  --mount $(RULES_DIR) /opt \
  --upload ./libhtp/htp/.libs/libhtp-0.2.so.1.0.2 /lib/libhtp-0.2.so.1.0.2 \
  --upload ./libhtp/htp/.libs/libhtp-0.2.so.1 /lib/libhtp-0.2.so.1 \
  --upload ./libhtp/htp/.libs/libhtp.so /lib/libhtp.so \
  --upload $(YAML_DIR)/src/.libs/libyaml-0.so.2.0.1 /lib/libyaml-0.so.2.0.1 \
  --upload $(YAML_DIR)/src/.libs/libyaml-0.so.2 /lib/libyaml-0.so.2 \
  --upload $(YAML_DIR)/src/.libs/libyaml.so /lib/libyaml.so \
  --upload ./src/.libs/suricata suricata \
  --run -+- mkdir -p /var/log/suricata -+- \
  --run -+- suricata -c $(RULES_CONFIG) --mpipe -+-


TILE_MONITOR_STATIC_ARGS = \
  --hvx "dataplane=1-35" \
  --huge-pages 800 \
  --mkdir /opt/test --cd /opt/test \
  --mount-tile /usr/lib \
  --mount-tile /lib \
  --mount $(RULES_DIR) /opt \
  --upload $(TILERA_ROOT)/tile/lib/libpcre.so.0.0.1 /lib/libpcre.so.0 \
  --upload $(TILERA_ROOT)/tile/lib/libnl.so.1.1 /lib/libnl.so.1 \
  --upload $(TILERA_ROOT)/tile/usr/lib/libpcap.so.1.0.0 /usr/lib/libpcap.so.1 \
  --upload ./src/suricata suricata \
  --run -+- mkdir -p /var/log/suricata -+- \
  --run -+- suricata -c $(RULES_CONFIG) --mpipe -+-

TILE_MONITOR_UT_ARGS = \
  --huge-pages 800 \
  --mkdir /opt/test --cd /opt/test \
  --mount-tile /usr/lib \
  --mount-tile /lib \
  --mount $(RULES_DIR) /opt \
  --upload ./libhtp/htp/.libs/libhtp-0.2.so.1.0.2 /lib/libhtp-0.2.so.1.0.2 \
  --upload ./libhtp/htp/.libs/libhtp-0.2.so.1 /lib/libhtp-0.2.so.1 \
  --upload ./libhtp/htp/.libs/libhtp.so /lib/libhtp.so \
  --upload $(YAML_DIR)/src/.libs/libyaml-0.so.2.0.1 /lib/libyaml-0.so.2.0.1 \
  --upload $(YAML_DIR)/src/.libs/libyaml-0.so.2 /lib/libyaml-0.so.2 \
  --upload $(YAML_DIR)/src/.libs/libyaml.so /lib/libyaml.so \
  --upload ./src/.libs/suricata suricata \
  --run -+- mkdir -p /var/log/suricata -+- \
  --run -+- suricata -u -+-

WILDCAT_CPU = --hvd CHIP_WIDTH=6 --hvd CHIP_HEIGHT=6

TILE_MONITOR_WILDCAT_ARGS = \
  $(WILDCAT_CPU) \
  $(WILDCAT_SPEED) \
  --hvx "dataplane=1-35" \
  --hvx "TLR_NETWORK=gbe1" \
  --huge-pages 800 \
  --mount $(RULES_DIR) /opt \
  --upload $(TILERA_ROOT)/tile/lib/libcap-ng.so.0.0.0 /lib/libcap-ng.so.0 \
  --upload $(TILERA_ROOT)/tile/lib/libpcre.so.0.0.1 /lib/libpcre.so.0 \
  --upload $(TILERA_ROOT)/tile/lib/libz.so.1.2.3 /lib/libz.so.1 \
  --upload $(TILERA_ROOT)/tile/lib/libnl.so.1.1 /lib/libnl.so.1 \
  --upload $(TILERA_ROOT)/tile/usr/lib/libpcap.so.1.0.0 /usr/lib/libpcap.so.1 \
  --upload ./libhtp/htp/.libs/libhtp-0.2.so.1.0.2 /lib/libhtp-0.2.so.1.0.2 \
  --upload ./libhtp/htp/.libs/libhtp-0.2.so.1 /lib/libhtp-0.2.so.1 \
  --upload ./libhtp/htp/.libs/libhtp.so /lib/libhtp.so \
  --upload $(YAML_DIR)/src/.libs/libyaml-0.so.2.0.1 /lib/libyaml-0.so.2.0.1 \
  --upload $(YAML_DIR)/src/.libs/libyaml-0.so.2 /lib/libyaml-0.so.2 \
  --upload $(YAML_DIR)/src/.libs/libyaml.so /lib/libyaml.so \
  --upload ./src/.libs/suricata suricata \
  --run -+- mkdir -p /var/log/suricata -+- \
  --run -+- suricata -c $(RULES_CONFIG) -i xgbe3 -+-

#  --run -+- strace -e !nanosleep /suricata -c /opt/suricata/etc/suricata.yaml -I xgbe3 -+-

#  --hvx "kcache_hash=none" \
#  --hvd MEMPROF_TILE=5,5 \

# This is sized for an 8GB Cannon card
#  --vmlinux $(BASE_DIR)/work/linux/vmlinux \

CANNON_SPEED = --hvd CPU_SPEED=1200

TILE_MONITOR_CANNON_STATIC_ARGS = \
  --hvx "dataplane=1-35" \
  --hvx "hugepagesz=64m hugepages=1" \
  $(CANNON_SPEED) \
  --hvd MEMPROF_TILE=5,5 \
  --huge-pages 400 \
  --mount-tile /bin \
  --mount-tile /lib \
  --mount-tile /usr \
  --mount $(RULES_DIR) /opt \
  --mount $(LOG_DIR) /var/log/suricata \
  --upload ./src/suricata suricata \
  --run -+- suricata -c $(RULES_CONFIG) --mpipe -+-

TILE_MONITOR_CANNON_CAPTURE_ARGS = \
  --hvx "dataplane=1-35" \
  --hvx "hugepagesz=64m hugepages=1" \
  $(CANNON_SPEED) \
  --hvd MEMPROF_TILE=5,5 \
  --huge-pages 400 \
  --vmlinux $(BASE_DIR)/work/linux/vmlinux \
  --quit; \
  $(TILERA_ROOT)/bin/parallelize \
  -++- $(TILE_MONITOR) --resume $(PCI_ARGS) \
    --mount-tile /bin \
    --mount-tile /lib \
    --mount-tile /usr \
    --mount $(RULES_DIR) /opt \
    --mount $(LOG_DIR) /var/log/suricata \
    --upload ./src/suricata suricata \
    --run -+- suricata -c $(RULES_CONFIG) --mpipe -+- \
  -++- /home/tdecanio/hack/gxpci_host_pq/run6.sh

# This is sized for an 16GB Wildcat card
TILE_MONITOR_WILDCAT_STATIC_ARGS = \
  --hvx "dataplane=1-35" \
  --hvx "hugepagesz=1g hugepages=2" \
  --hvd MEMPROF_TILE=5,5 \
  $(WILDCAT_SPEED) \
  --huge-pages 800 \
  --mount-tile /bin \
  --mount-tile /lib \
  --mount-tile /usr \
  --mount $(RULES_DIR) /opt \
  --mount $(LOG_DIR) /var/log/suricata \
  --upload ./src/suricata suricata \
  --run -+- suricata -c $(RULES_CONFIG) --mpipe -+-

TILE_MONITOR_WILDCAT_FEEDBACK_ARGS = \
  --hvx "dataplane=1-35" \
  $(WILDCAT_SPEED) \
  --huge-pages 800 \
  --mount-tile /usr/lib \
  --mount-tile /lib \
  --mount $(RULES_DIR) /opt \
  --upload ./libhtp/htp/.libs/libhtp-0.2.so.1.0.2 /lib/libhtp-0.2.so.1.0.2 \
  --upload ./libhtp/htp/.libs/libhtp-0.2.so.1 /lib/libhtp-0.2.so.1 \
  --upload ./libhtp/htp/.libs/libhtp.so /lib/libhtp.so \
  --upload $(YAML_DIR)/src/.libs/libyaml-0.so.2.0.1 /lib/libyaml-0.so.2.0.1 \
  --upload $(YAML_DIR)/src/.libs/libyaml-0.so.2 /lib/libyaml-0.so.2 \
  --upload $(YAML_DIR)/src/.libs/libyaml.so /lib/libyaml.so \
  --upload ./src/.libs/suricata suricata \
  --run -+- mkdir -p /var/log/suricata -+- \
  --run -+- suricata -c $(RULES_CONFIG) -i xgbe3 -+- \
  --download /tmp/raw_feedback raw_feedback

TILE_MONITOR_WILDCAT_FEEDBACK_STATIC_ARGS = \
  --hvx "dataplane=1-35" \
  $(WILDCAT_SPEED) \
  --huge-pages 800 \
  --mount-tile /usr/lib \
  --mount-tile /lib \
  --mount $(RULES_DIR) /opt \
  --upload ./libhtp/htp/.libs/libhtp-0.2.so.1.0.2 /lib/libhtp-0.2.so.1.0.2 \
  --upload ./libhtp/htp/.libs/libhtp-0.2.so.1 /lib/libhtp-0.2.so.1 \
  --upload ./libhtp/htp/.libs/libhtp.so /lib/libhtp.so \
  --upload $(YAML_DIR)/src/.libs/libyaml-0.so.2.0.1 /lib/libyaml-0.so.2.0.1 \
  --upload $(YAML_DIR)/src/.libs/libyaml-0.so.2 /lib/libyaml-0.so.2 \
  --upload $(YAML_DIR)/src/.libs/libyaml.so /lib/libyaml.so \
  --upload ./src/suricata suricata \
  --run -+- mkdir -p /var/log/suricata -+- \
  --run -+- suricata -c $(RULES_CONFIG) -i xgbe3 -+- \
  --download /tmp/raw_feedback raw_feedback

TILE_MONITOR_WILDCAT_PROFILE_ARGS = \
  $(WILDCAT_CPU) \
  $(WILDCAT_SPEED) \
  --hvx "dataplane=1-35" \
  --hvx "TLR_NETWORK=gbe1" \
  --huge-pages 800 \
  --mount-tile /usr/lib \
  --mount-tile /lib \
  --mount $(RULES_DIR) /opt \
  --upload ./libhtp/htp/.libs/libhtp-0.2.so.1.0.2 /lib/libhtp-0.2.so.1.0.2 \
  --upload ./libhtp/htp/.libs/libhtp-0.2.so.1 /lib/libhtp-0.2.so.1 \
  --upload ./libhtp/htp/.libs/libhtp.so /lib/libhtp.so \
  --upload $(YAML_DIR)/src/.libs/libyaml-0.so.2.0.1 /lib/libyaml-0.so.2.0.1 \
  --upload $(YAML_DIR)/src/.libs/libyaml-0.so.2 /lib/libyaml-0.so.2 \
  --upload $(YAML_DIR)/src/.libs/libyaml.so /lib/libyaml.so \
  --upload ./src/.libs/suricata suricata \
  --run -+- mkdir -p /var/log/suricata -+- \
  --launch -+- suricata -c $(RULES_CONFIG) -i xgbe3 -+- \
  --run -+- sleep 210 -+- \
  --profile-init --profile-kernel \
  --profile-reset \
  --profile-events '--event=ONE:10000000 --event=INSTRUCTION_BUNDLE:10000000 --event=LOAD_STALL:10000000 --event=INSTRUCTION_STALL:10000000' \
  --profile-start \
  --run -+- sleep 300 -+- \
  --profile-stop \
  --profile-dump \
  --profile-capture samples \
  --profile-analyze samples \
  --profile-shutdown \
  --quit

TILE_MONITOR_WILDCAT_PROFILE_STATIC_ARGS = \
  --hvx "dataplane=1-35" \
  --hvx "hugepagesz=1g hugepages=2" \
  $(WILDCAT_SPEED) \
  --huge-pages 800 \
  --mount-tile /bin \
  --mount-tile /lib \
  --mount-tile /usr/lib \
  --mount $(RULES_DIR) /opt \
  --mount $(LOG_DIR) /var/log/suricata \
  --upload ./src/suricata suricata \
  --launch -+- suricata -c $(RULES_CONFIG) --mpipe -+- \
  --run -+- sleep 210 -+- \
  --profile-init --profile-kernel \
  --profile-reset \
  --profile-events '--event=ONE:10000000 --event=INSTRUCTION_BUNDLE:10000000 --event=LOAD_STALL:10000000 --event=INSTRUCTION_STALL:10000000' \
  --profile-start \
  --run -+- sleep 300 -+- \
  --profile-stop \
  --profile-dump \
  --profile-capture samples \
  --profile-analyze samples \
  --profile-shutdown \
  --quit

FUNCTIONAL=--functional
PROFILE=--sim-args -+- --xml-profile profile.xml --profile-disable-at-startup -+-

ARGS := mpipe0:mac=2:input=$(PCAPFILE):output=output.pcap:bps=10G:stall

SIM_ARGS := --sim-args -+- --extra-shim-args "$(ARGS)" -+-

SIM_DEPS := $(PCAP_FILE)

run_sim: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) --image-file $(IMAGE_FILE) \
     $(FUNCTIONAL) \
     $(PROFILE) \
     --debug-on-crash \
	 $(SIM_ARGS) $(TILE_MONITOR_ARGS)

run_sim_static: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) --image-file $(IMAGE_FILE) \
     $(FUNCTIONAL) \
     $(PROFILE) \
     --debug-on-crash \
	 $(SIM_ARGS) $(TILE_MONITOR_STATIC_ARGS)

run_ut_sim: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) --image-file $(IMAGE_FILE) \
     --functional \
     --debug-on-crash \
	 $(SIM_ARGS) $(TILE_MONITOR_UT_ARGS)

fb_sim: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) --image-file $(IMAGE_FILE) \
        $(FUNCTIONAL) \
     --debug-on-crash \
	    $(SIM_ARGS) $(TILE_MONITOR_WILDCAT_FEEDBACK_ARGS)


run_wc_dyn: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) \
        $(WILDCAT_ARGS) \
	--debug-on-crash \
	$(TILE_MONITOR_WILDCAT_ARGS)

reimage_net:
	$(TILE_MONITOR) \
        $(NET_ARGS) \
	--hvx "dataplane=1-35" \
        --hvx "hugepagesz=1g hugepages=2" \
	--huge-pages 800 \
        --hvd MEMPROF_TILE=5,5 \
	--rootfs /dev/sda1 -- mount

run_net_dyn: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) \
        $(NET_ARGS) \
	--debug-on-crash \
	$(TILE_MONITOR_WILDCAT_ARGS)

run_net: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) \
        $(NET_ARGS) \
	--debug-on-crash \
	$(TILE_MONITOR_WILDCAT_STATIC_ARGS)

run_wc: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) \
        $(WILDCAT_ARGS) \
	--debug-on-crash \
	$(TILE_MONITOR_WILDCAT_STATIC_ARGS)

# This target runs suricata on a "TILEncore-Gx" card
run_pci: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) \
        $(PCI_ARGS) \
	--debug-on-crash \
	$(TILE_MONITOR_CANNON_STATIC_ARGS)

# This target runs suricata on a "TILEncore-Gx" card
# with pcie forwarding enabled
run_pci_capture: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) \
        $(PCI_ARGS) \
	--debug-on-crash \
	$(TILE_MONITOR_CANNON_CAPTURE_ARGS)

fb_wc: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) \
        $(WILDCAT_ARGS) \
	--debug-on-crash \
	$(TILE_MONITOR_WILDCAT_FEEDBACK_ARGS)

fb_wc_static: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) \
        $(WILDCAT_ARGS) \
	--debug-on-crash \
	$(TILE_MONITOR_WILDCAT_FEEDBACK_STATIC_ARGS)

fb_net_static: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) \
        $(NET_ARGS) \
	--debug-on-crash \
	$(TILE_MONITOR_WILDCAT_FEEDBACK_STATIC_ARGS)

prof_wc: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) \
        $(WILDCAT_ARGS) \
	--debug-on-crash \
	$(TILE_MONITOR_WILDCAT_PROFILE_ARGS)

prof_wc_static: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) \
        $(WILDCAT_ARGS) \
	--debug-on-crash \
	$(TILE_MONITOR_WILDCAT_PROFILE_STATIC_ARGS)

prof_net: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) \
        $(NET_ARGS) \
	--debug-on-crash \
	$(TILE_MONITOR_WILDCAT_PROFILE_ARGS)

prof_net_static: $(SIM_DEPS) $(IMAGE_FILE)
	$(TILE_MONITOR) \
        $(NET_ARGS) \
	--debug-on-crash \
	$(TILE_MONITOR_WILDCAT_PROFILE_STATIC_ARGS)

.PHONY: run_sim
